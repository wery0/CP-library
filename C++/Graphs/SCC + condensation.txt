struct SCC {
    int n;
    vec<vec<int>> l;
    vec<vec<int>> inv;
    vec<vec<int>> g;
    vec<int> us;
    vec<int> top_sort;
    vec<int> color;
    int ncolor = 0;

    SCC(int N) {
        n = N;
        l = vec<vec<int>>(n, vec<int>());
        inv = vec<vec<int>>(n, vec<int>());
        us = vec<int>(n);
        color = vec<int>(n, -1);
    }

    void add_edge(int x, int y) {
        l[x].pb(y);
        inv[y].pb(x);
    }

    void dfs2(int v, int col) {
        color[v] = col;
        for (int h : inv[v]) {
            if (color[h] == -1) dfs2(h, col);
        }
    }

    void dfs1(int v) {
        us[v] = 1;
        for (int h : l[v]) {
            if (!us[h]) dfs1(h);
        }
        top_sort.pb(v);
    }

    void calc() {
        for (int q = 0; q < n; q++) {
            if (!us[q]) dfs1(q);
        }
        reverse(all(top_sort));
        for (int v : top_sort) {
            if (color[v] == -1) dfs2(v, ncolor++);
        }
        g = vec<vec<int>>(ncolor, vec<int>());
        for (int q = 0; q < n; q++) {
            for (int h : l[q]) {
                if (color[q] == color[h]) continue;
                g[color[q]].pb(color[h]);
            }
        }
        for (int q = 0; q < ncolor; q++) {
            sort(all(g[q]));
            g[q].erase(unique(all(g[q])), g[q].end());
        }
    }
};
//vertexes of condensation graph are numered in order of topological sort.