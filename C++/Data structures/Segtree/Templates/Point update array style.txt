template<typename T>
struct segtree_point_upd {

    uint a, U;
    //create needed vectors

    segtree_point_upd() {}

    segtree_point_upd(vec<T> &m) {
        a = m.size();
        U = geq_pow2(a);
        sm.resize(U * 2);
        mn.resize(U * 2);
        mx.resize(U * 2);
        //resize need vectors with U * 2
        for (uint q = 0; q < a; ++q) {
            //write init of last layer. Indices of last layer is U + q.
        }
        for (uint q = U; --q;) {
            upd(q);
            //write additional info, of need
        }
    }

    segtree_point_upd(uint a) {
        vec<T> m(a);
        (*this) = segtree_point_upd<int>(m);
    }

    inline void upd(uint v) {
        //write update
    }

    inline T seg_statistic(uint ql, uint qr) {
        ql += U, qr += U;
        T ans = 0;
        for (; ql <= qr; ql = (ql + 1) >> 1, qr = (qr - 1) >> 1) {
            //change merge
            if (ql & 1) merge(ans, arr[ql]);
            if (~qr & 1) merge(arr[qr], ans);
        }
        return ans;
    }

    inline void point_change(uint p, T val) {
        p += U;
        //change element in arrays
        //sm[p] = val;
        for (p >>= 1; p; p >>= 1) {
            upd(p);
        }
    }
};
//0-indexed bottom-up segtree
//Supports only point updates