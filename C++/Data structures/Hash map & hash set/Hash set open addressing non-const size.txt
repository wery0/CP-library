template<typename K>
struct hash_set_open_addressing {

    int N;
    vec<K> store;
    vec<bool> is_occupied;

    hash_set_open_addressing() {}

    hash_set_open_addressing(int n) {
        N = n;
        store.resize(n);
        is_occupied.resize(n);
    }

    constexpr inline void next_pos(int &pos) const {
        pos = (pos + 1) % N;
    }

    constexpr inline int hsh(const K& key) const {
        if constexpr(is_integral<K>::value) {
            return key % N;
        } else {
            return hash<K> {}(key) % N;
        }
    }

    inline bool contains(const K& key) const {
        int pos = hsh(key);
        for (; is_occupied[pos]; next_pos(pos)) {
            if (store[pos] == key) return true;
        }
        return false;
    }

    inline void insert(const K& key) {
        int pos = hsh(key);
        for (; is_occupied[pos]; next_pos(pos)) {
            if (store[pos] == key) {
                return;
            }
        }
        store[pos] = key;
        is_occupied[pos] = true;
    }
};