// G must be at least 1 greater than the array size
template<typename T>
struct fenv {
    int G;
    vec<T> fen;
    //T fen[G] = {0};
    //array<T, G> fen{};

    fenv() {}

    fenv(int _G) {
        G = _G;
        fen = vec<T>(G);
    }

    fenv(vec<T> &n) {
        G = n.size() + 1;
        fen = vec<T>(G);
        for (int q = 1; q <= n.size(); q++) {
            fen[q] += n[q - 1];
            const int nw = q + (q & -q);
            if (nw < G) fen[nw] += fen[q];
        }
        for (int q = n.size() + 1; q < G; q++) {
            const int nw = q + (q & -q);
            if (nw < G) fen[nw] += fen[q];
        }
    }

    void clear() {
        fill(all(fen), 0);
    }

    void add(int p, T x) {  //0-index
        assert(0 <= p && p < G - 1);
        for (p += 1; p < G; p += p & -p) fen[p] += x;
    }

   T pref_sum(int p) {
        assert(-1 <= p && p < G - 1);
        T o = 0;
        for (p += 1; p; p -= p & -p) o += fen[p];
        return o;
    }

    T suf_sum(int p) {
        return pref_sum(G - 2) - pref_sum(p - 1);
    }

    T seg_sum(int l, int r) { //0-index
        assert(0 <= l && r < G - 1);
        return pref_sum(r) - pref_sum(l - 1);
    }

    //[1, 2, 3] -> f(4) = 2, f(6) = 3
    int max_pref_with_sum_leq_k(T k) {
        int p = 0, step = 1 << __lg(G);
        T s = 0;
        for (; step; step >>= 1) {
            int nw = p + step;
            if (nw < G && s + fen[nw] <= k) p = nw, s += fen[nw];
        }
        return p;
    }
};