template<const int MOD>
struct mint {
    int val = 0;

    mint() = default;

    template<typename T>
    mint(T c) {
        static_assert(is_integral<T>::value);
        if (c < 0) c += ((-c - 1) / MOD + 1) * MOD;
        else if (c >= MOD) c %= MOD;
        val = c;
    }

    mint binpow(ll pw) {
        ll o = 1;
        ll cur = val;
        for (; pw; pw >>= 1) {
            if (pw & 1) o = o * cur % MOD;
            cur = cur * cur % MOD;
        }
        return o;
    }

    mint inv() {return binpow(val, MOD - 2);}

    mint operator+(const mint &o) const {return val + o.val >= MOD ? val + o.val - MOD : val + o.val;}
    mint operator-(const mint &o) const {return val < o.val ? MOD - o.val + val : val - o.val;}
    mint operator*(const mint &o) const {return 1ll * val * o.val % MOD;}
    mint operator/(const mint &o) const {return 1ll * val * o.inv() % MOD;}

    void operator+=(const mint &o) {val += o.val; val -= val < MOD ? 0 : MOD;}
    void operator-=(const mint &o) {val -= o.val; val += val < 0 ? MOD : 0;}
    void operator*=(const mint &o) {val = 1ll * val * o.val % MOD;}
    void operator/=(const mint &o) {val = 1ll * val * o.inv() % MOD;}

    friend ostream& operator<<(ostream& out, mint& m) {return out << m.val;}
    friend ostream& operator<<(ostream& out, mint&& m) {return out << m.val;}
};